" Vundle {"{{{
    set nocompatible    " 设置 vim 为不兼容 vi 模式
    filetype off        " 必须的

    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()

    " 代码源在 github 上的
    Bundle 'gmarik/vundle'
    Bundle 'tpope/vim-fugitive'
    Bundle 'tpope/vim-surround'
    Bundle 'tpope/vim-markdown'
    Bundle 'Shougo/unite.vim'
    Bundle 'Shougo/neomru.vim'
    Bundle 'Shougo/neocomplcache.vim'
    Bundle 'Shougo/vimproc.vim'
    Bundle 'Shougo/vimshell.vim'
    Bundle 'Shougo/unite-outline'
    Bundle "osyo-manga/unite-filetype"
    Bundle "osyo-manga/unite-fold"
    Bundle "osyo-manga/unite-quickfix"
    Bundle 'ujihisa/unite-colorscheme'
    Bundle "ujihisa/unite-locate"
    Bundle "tsukkee/unite-help"
    Bundle "tacroe/unite-mark"
    Bundle 'scrooloose/syntastic'
    Bundle 'scrooloose/nerdtree'
    Bundle 'scrooloose/nerdcommenter'
    Bundle "mattn/emmet-vim"
    Bundle 'mattn/webapi-vim'
    Bundle 'mattn/gist-vim'
    Bundle "mattn/unite-gist"
    Bundle 'kien/ctrlp.vim'
    Bundle 'majutsushi/tagbar'
    Bundle 'mbbill/undotree'
    Bundle 'xuhdev/SingleCompile'
    Bundle 'Lokaltog/vim-easymotion'
    Bundle 'terryma/vim-multiple-cursors'
    Bundle 'airblade/vim-gitgutter'
    Bundle 'huxiao/vim-bookmark'
    Bundle 'SirVer/ultisnips'
    Bundle 'honza/vim-snippets'
    Bundle 'godlygeek/tabular'
    Bundle 'gorodinskiy/vim-coloresque'
    Bundle 'Rykka/colorv.vim'
    Bundle 'flazz/vim-colorschemes'
    Bundle 'altercation/vim-colors-solarized'
    Bundle 'greyblake/vim-preview'
    Bundle "waylan/vim-markdown-extra-preview"
    Bundle 'yonchu/accelerated-smooth-scroll'
    Bundle 'bling/vim-airline'
    Bundle 'klen/python-mode'
    Bundle 'Valloric/YouCompleteMe'

    Bundle 'groenewege/vim-less'
    Bundle "pangloss/vim-javascript"
    Bundle 'hail2u/vim-css3-syntax'
    Bundle 'elzr/vim-json'
    Bundle 'tpope/vim-cucumber'
    Bundle 'quentindecock/vim-cucumber-align-pipes'
    Bundle 'ianva/vim-youdao-translater'
    Bundle 'nathanaelkane/vim-indent-guides'

    " 代码存放在 vim script 上
    Bundle 'sudo.vim'
    Bundle 'grep.vim'
    Bundle 'javacomplete'
    Bundle 'matchit.zip'
    Bundle 'a.vim'
    Bundle 'TaskList.vim'
    Bundle 'python.vim'
    Bundle 'Puppet-Syntax-Highlighting'

    " 代码存放在其他地方
    " Bundle 'git://git.wincent.com/command-t.git'

    filetype plugin indent on     " 必须有,打开文件类型检测
    " Brief help
    " :BundleList          - list configured bundles
    " :BundleInstall(!)    - install(update) bundles
    " :BundleSearch(!) foo - search(or refresh cache first) for foo
    " :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
    "
    " see :h vundle for more details or wiki for FAQ
    " NOTE: comments after Bundle command are not allowed..
" }"}}}

" General {

    syntax on                       " 关键字上色
    syntax enable                   " 语法高亮
    set nu                          " 显示行号
    set nocp                        " 不兼容vi
    set hidden                      " 允许不保存切换buffer
    set splitright                  " 新分割窗口在右边
    set splitbelow                  " 新分割窗口在下边
    set autoread                    " 文件在Vim之外修改过，自动重新读入
    set timeoutlen=350              " 等待时间,如<leader>键后的输入
    set helpheight=999              " 查看帮助文档全屏
    set scrolljump=3                " 当光标离开屏幕滑动行数
    set scrolloff=1                 " 保持在光标上下最少行数
    set showmatch                   " 短暂回显匹配括号
    set pastetoggle=<F8>            " 转换粘贴模式

    set hlsearch                    " 检索时高亮显示匹配项
    set incsearch                   " 边输入边搜索
    set ignorecase                  " 搜索忽略大小写
    set smartcase                   " 智能大小写搜索

    set wildmenu                    " 命令模式下补全以菜单形式显示
    set wildmode=list:longest,full  " 命令模式补全模式
    set foldenable                  " 启动折叠
    set foldmethod=marker           " 设置折叠模式
    set encoding=utf-8              " 编码，使汉语正常显示
    set termencoding=utf-8
    set fileencodings=utf-8,gb2312,gbk,gb18030

" }

" Formatting {

    set expandtab                   " tab=空格
    set tabstop=4                   " tab缩进4个空格
    set shiftwidth=4                " 自动缩进空格数
    set softtabstop=4               " 退格删除缩进
    set autoindent                  " 与前一行同样等级缩进
    set backspace=indent,eol,start  " 退格可删除缩进和原有字符
    au VimResized * exe "normal! \<c-w>="
    au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o " 下一行不自动添加注释

" }

" Key (re)Mappings {

    let mapleader=","           " 映射<leader>键为',',默认'\' remain <Leader>y u i o p k m
    let maplocalleader=" "      " 映射<localleader>键到' 'remain y u i j
    nmap j gj
    nmap k gk
    inoremap jj <ESC>
    nnoremap <silent> J :bp<CR>
    nnoremap <silent> K :bn<CR>
    noremap <silent><Leader>h :set hls! hls?<CR>
    noremap <silent><Leader>s :set rnu! rnu?<CR>
    noremap <silent><Leader>l :set list! list?<CR>
    nnoremap <LocalLeader>o @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

    " 更方便窗口间移动
    nnoremap <C-h> <C-w>h
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-l> <C-w>l

    " 命令模式按键映射
    cnoremap <C-a> <Home>
    cnoremap <C-e> <End>
    cnoremap <C-p> <Up>
    cnoremap <C-n> <Down>
    cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>

    " Tab操作
    nnoremap <Leader>tc :tabc<CR>
    nnoremap <Leader>tn :tabn<CR>
    nnoremap <Leader>tp :tabp<CR>
    nnoremap <Leader>te :tabe<Space>

    " 修正易错命令
    command -bang -nargs=* Q q<bang>
    command -bang -nargs=* Wa wa<bang>
    command -bang -nargs=* WA wa<bang>
    command -bang -nargs=* -complete=file W w<bang> <args>
    command -bang -nargs=* -complete=file Wq wq<bang> <args>
    command -bang -nargs=* -complete=file WQ wq<bang> <args>

" }

" Vim UI {

    if filereadable(expand("~/.vim/bundle/vim-colors-solarized/colors/solarized.vim"))
        let g:solarized_termcolors=256
        let g:solarized_termtrans=1
        let g:solarized_contrast="normal"
        let g:solarized_visibility="normal"
        color solarized             " 载入皮肤主题
        set background=dark
    endif

    set t_Co=256                    " 终端显示256色
    set tabpagemax=15               " 最多15个Tab
    set showmode                    " 显示当前mode
    set cursorline                  " 高亮当前行
    set list                        " 显示特殊符号
    set listchars=tab:›\ ,trail:•,extends:#,nbsp:.

    hi clear SignColumn             " 标记列背景和主题背景匹配
    hi clear LineNr                 " 当前行列背景和主题背景匹配

    hi CursorLineNr ctermfg=red
    hi VertSplit ctermbg=Grey ctermfg=Grey cterm=none
    hi Visual ctermbg=81 ctermfg=black cterm=none
    hi Comment ctermfg=blue
    hi Statement ctermfg=cyan
    hi DiffAdd ctermbg=blue ctermfg=white
    hi DiffDelete ctermbg=green ctermfg=none
    hi DiffChange ctermbg=red ctermfg=White
    hi DiffText ctermbg=yellow ctermfg=black

    if has('cmdline_info')
        set showcmd                 " 右下角显示当前操作
        set ruler                   " 右下角显示状态说明
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " 设定格式
    endif

    if has('statusline')
        set laststatus=1
        set statusline=%<%f\                     " Filename
        set statusline+=%w%h%m%r                 " Options
        set statusline+=\ [%{&ff}/%Y]            " Filetype
        set statusline+=\ [%{getcwd()}]          " Current dir
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
    endif

" }

" Function {

    function! LinesOfCode()
        echo system('cloc --quiet '.bufname("%"))
    endfunction

    function! RangerChooser()
        exec "silent !ranger --choosefile=/tmp/chosenfile " . expand("%:p:h")
        if filereadable('/tmp/chosenfile')
            exec 'edit ' . system('cat /tmp/chosenfile')
            call system('rm /tmp/chosenfile')
        endif
        redraw!
    endfunction
    map <LocalLeader>r :call RangerChooser()<CR>

    autocmd FileType unite call s:unite_settings()
    function! s:unite_settings()
        imap <buffer> <C-j> <Plug>(unite_select_next_line)
        imap <buffer> <C-k> <Plug>(unite_select_previous_line)
        nmap <buffer> <C-k> <C-w>k
    endfunction

    function! GetColorFormat()
        let formats = {'r' : 'RGB',
                      \'n' : 'NAME',
                      \'s' : 'HEX',
                      \'ar': 'RGBA',
                      \'pr': 'RGBP',
                      \'pa': 'RGBAP',
                      \'m' : 'CMYK',
                      \'l' : 'HSL',
                      \'la' : 'HSLA',
                      \'h' : 'HSV',
                      \}
        let formats_menu = ["\n"]
        for [k, v] in items(formats)
            call add(formats_menu, "  ".k."\t".v."\n")
        endfor
        let fsel = get(formats, input('Choose a format: '.join(formats_menu).'? '))
        return fsel
    endfunction

    function! GetColorMethod()
        let methods = {
                       \'h' : 'Hue',
                       \'s' : 'Saturation',
                       \'v' : 'Value',
                       \'m' : 'Monochromatic',
                       \'a' : 'Analogous',
                       \'3' : 'Triadic',
                       \'4' : 'Tetradic',
                       \'n' : 'Neutral',
                       \'c' : 'Clash',
                       \'q' : 'Square',
                       \'5' : 'Five-Tone',
                       \'6' : 'Six-Tone',
                       \'2' : 'Complementary',
                       \'p' : 'Split-Complementary',
                       \'l' : 'Luma',
                       \'g' : 'Turn-To',
                       \}
        let methods_menu = ["\n"]
        for [k, v] in items(methods)
            call add(methods_menu, "  ".k."\t".v."\n")
        endfor
        let msel = get(methods, input('Choose a method: '.join(methods_menu).'? '))
        return msel
    endfunction

" }

" Plugins {

    " vim-airline {
        set laststatus=2                                    " 显示状态栏
        let g:airline_theme='powerlineish'                     " 设置主题
        let g:airline_powerline_fonts = 0                   " 是否使用powerline字体
        let g:airline#extensions#tabline#enabled = 1        " 顶部tab栏显示
        let g:airline#extensions#tabline#tab_nr_type = 1
        let g:airline#extensions#tabline#show_tab_nr = 1
        let g:airline#extensions#tabline#show_tab_type = 1
        let g:airline#extensions#tabline#buffer_nr_show = 0

        if g:airline_powerline_fonts != 1
            let g:airline_left_sep=''
            let g:airline_right_sep=''
            let g:airline#extensions#tabline#left_sep=''
            let g:airline#extensions#tabline#right_sep=''
        endif

        function! AirlineInit()
            let g:airline_section_a = airline#section#create(['mode'])
            let g:airline_section_b = airline#section#create_left(['branch','hunks'])
            let g:airline_section_c = airline#section#create(['%f'])
            let g:airline_section_y = airline#section#create(['ffenc','%4b'])
            let g:airline_section_z = airline#section#create(['%P',':','%4l',',','%3c'])
        endfunction
        autocmd VimEnter * call AirlineInit()
    " }

    " Cscope {
        set cscopetag
        set cscopequickfix=s-,c-,d-,i-,t-,e-   " 使用QuickFix窗口来显示cscope查找结果
        if filereadable("cscope.out")
            cs add cscope.out
        endif
        nmap <Leader><Leader>g :cs find g <C-R>=expand("<cword>")<cr><cr>
        nmap <Leader><Leader>c :cs find c <C-R>=expand("<cword>")<cr><cr>
        nmap <Leader><Leader>d :cs find d <C-R>=expand("<cword>")<cr><cr>
        nmap <Leader><Leader>s :cs find s <C-R>=expand("<cword>")<cr><cr>
        nmap <Leader><Leader>4 :cs find t <C-R>=expand("<cword>")<cr><cr>
        nmap <Leader><Leader>6 :cs find e <C-R>=expand("<cword>")<cr><cr>
        nmap <Leader><Leader>7 :cs find f <C-R>=expand("<cfile>")<cr><cr>
        nmap <Leader><Leader>8 :cs find i <C-R>=expand("<cfile>")<cr><cr>
    " }

    " Tagbar {
        nmap <silent> <Leader>e :TagbarToggle<cr>
        let g:tagbar_left = 1                   " 在右侧
        let g:tagbar_width = 25                 " 设置宽度
    " }

    " NerdTree {
        map <Leader>w :NERDTreeToggle<CR>
        map <leader>wf :NERDTreeFind<CR>
        let NERDTreeWinPos=1                    " 在左侧
        let NERDTreeWinSize=25                  " 设置宽度
        let NERDTreeShowHidden=1                " 显示隐藏文件
        let NERDTreeQuitOnOpen=1                " 打开后退出NERDTree
        let NERDTreeShowBookmarks=1             " 显示书签
        let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
    " }

    " vim-bookmark {
        let g:vbookmark_bookmarkSaveFile = $HOME . '.vim/.vimtmp/vimbookmark'
    " }

    " ColorV {
        let g:colorv_cache_file=$HOME.'/.vim/.vimtmp/vim_colorv_cache'
        let g:colorv_cache_fav=$HOME.'/.vim/.vimtmp/vim_colorv_cache_fav'
    " }

    " UndoTree {
        nmap <silent> <Leader>q :UndotreeToggle<cr>
        let g:undotree_SetFocusWhenToggle = 1
    " }

    " persistent_undo {
        set nobackup noswapfile
        set history=200
        if has('persistent_undo')
            set undofile
            set undolevels=1000
            set undoreload=10000
            set undodir=~/.vim/.vimtmp/undo
        endif
        set viminfo+=n$HOME/.vim/.vimtmp/viminfo
    " }

    " ctrlp {
        let g:ctrlp_map = '<c-p>'
        let g:ctrlp_cmd = 'CtrlP'
        let g:ctrlp_open_multiple_files = 'v'   " <C-Z><C-O>时垂直分屏打开多个文件
        let g:ctrlp_working_path_mode= 'ra'
        let g:ctrlp_match_window_bottom= 1
        let g:ctrlp_max_height= 10
        let g:ctrlp_match_window_reversed=0
        let g:ctrlp_mruf_max=500
        let g:ctrlp_follow_symlinks=1
        let g:ctrlp_custom_ignore = {
          \ 'dir':  '\v[\/]\.(git|hg|svn)$',
          \ 'file': '\v\.(log|jpg|png|jpeg|exe|so|dll|zip|swp)$',
          \ }
    " }

    " Syntastic {
        let g:syntastic_chek_on_open=1
        let g:syntastic_error_symbol = '✗'
        let g:syntastic_warning_symbol = '⚠'
        let g:syntastic_always_populate_loc_list=1
        let g:syntastic_loc_list_height = 6
        let g:syntastic_enable_highlighting = 0
        hi SyntasticError ctermbg=red
        hi SyntasticWarning ctermbg=yellow
        nmap <Leader>r :SyntasticCheck<CR>:Errors<CR>
        nmap <Leader>x :lnext<cr>
        nmap <Leader>z :lpre<cr>
    " }

    " gitgutter {
        let g:gitgutter_enabled = 1
        let g:gitgutter_highlight_lines = 0
        let g:gitgutter_map_keys = 0
        let g:gitgutter_sign_column_always = 1
        nmap gh <Plug>GitGutterNextHunk
        nmap hg <Plug>GitGutterPrevHunk
    " }

    " Unite {
        nmap <silent> <Leader>f :Unite file -start-insert<cr>
        nmap <silent> <Leader>fr :Unite file_mru -start-insert<cr>
        nmap <silent> <Leader>b :Unite buffer<cr>
        nnoremap <LocalLeader>p :Unite history/yank<cr>
        nnoremap <LocalLeader>q :Unite register<cr>
        nnoremap <LocalLeader>z :Unite -silent -auto-preview -winheight=25 quickfix<cr>
        nnoremap <LocalLeader>x :Unite -silent -auto-preview -winheight=25 location_list<cr>
        nnoremap <silent><Leader>a :Unite -silent -auto-preview -winheight=25 -no-quit grep<CR>
        nnoremap <silent><Leader>A :UniteWithCursorWord -silent -auto-preview -winheight=25 -no-quit grep<CR>
        nnoremap <silent><Leader>c :Unite -silent -vertical -winwidth=40 -direction=topleft -toggle outline<CR>

        call unite#filters#matcher_default#use(['matcher_fuzzy'])
        call unite#filters#sorter_default#use(['sorter_rank'])
        call unite#custom#source('file_mru,file_rec,file_rec/async,grep,locate',
            \ 'ignore_pattern', join(['\.git/', 'tmp/', 'bundle/'], '\|'))
        let g:unite_prompt = '>>> '
        let g:unite_marked_icon = '✓'
        let g:unite_winheight = 15
        let g:unite_update_time = 200
        let g:unite_split_rule = 'botright'
        let g:unite_source_history_yank_enable = 1
        let g:unite_enable_start_insert = 0
        let g:unite_force_overwrite_statusline = 0
        let g:unite_data_directory = $HOME.'/.vim/.vimtmp/unite'
        let g:unite_source_buffer_time_format = '(%d-%m-%Y %H:%M:%S) '
        let g:unite_source_file_mru_time_format = '(%d-%m-%Y %H:%M:%S) '
        let g:unite_source_directory_mru_time_format = '(%d-%m-%Y %H:%M:%S) '

        if executable('ag')
            let g:unite_source_grep_command='ag'
            let g:unite_source_grep_default_opts='--nocolor --nogroup -a -S'
            let g:unite_source_grep_recursive_opt=''
            let g:unite_source_grep_search_word_highlight = 1
        elseif executable('ack')
            let g:unite_source_grep_command='ack'
            let g:unite_source_grep_default_opts='--no-group --no-color'
            let g:unite_source_grep_recursive_opt=''
            let g:unite_source_grep_search_word_highlight = 1
        endif
    " }

    " Fugitive {
        nnoremap <Leader>gn :Unite output:echo\ system("git\ init")<CR>
        nnoremap <Leader>gs :Gstatus<CR>
        nnoremap <Leader>gw :Gwrite<CR>
        nnoremap <Leader>go :Gread<CR>
        nnoremap <Leader>gR :Gremove<CR>
        nnoremap <Leader>gm :Gmove<Space>
        nnoremap <Leader>gc :Gcommit<CR>
        nnoremap <Leader>gd :Gdiff<CR>
        nnoremap <Leader>gb :Gblame<CR>
        nnoremap <Leader>gB :Gbrowse<CR>
        nnoremap <Leader>gp :Git! push<CR>
        nnoremap <Leader>gP :Git! pull<CR>
        nnoremap <Leader>gi :Git!<Space>
        nnoremap <Leader>ge :Gedit<CR>
        nnoremap <Leader>gE :Gedit<Space>
        nnoremap <Leader>gl :exe "silent Glog <Bar> Unite -no-quit
                    \ quickfix"<CR>:redraw!<CR>
        nnoremap <Leader>gL :exe "silent Glog -- <Bar> Unite -no-quit
                    \ quickfix"<CR>:redraw!<CR>
        nnoremap <Leader>gt :!tig<CR>:redraw!<CR>
        nnoremap <Leader>gS :exe "silent !shipit"<CR>:redraw!<CR>
        nnoremap <Leader>gg :exe 'silent Ggrep -i '.input("Pattern: ")<Bar>Unite
                    \ quickfix -no-quit<CR>
        nnoremap <Leader>ggm :exe 'silent Glog --grep='.input("Pattern: ").' <Bar>
                    \Unite -no-quit quickfix'<CR>
        nnoremap <Leader>ggt :exe 'silent Glog -S='.input("Pattern: ").' <Bar>
                    \Unite -no-quit quickfix'<CR>

        nnoremap <Leader>ggc :silent! Ggrep -i<Space>
        nnoremap <Leader>gcd :Gcd<CR>
        nnoremap <Leader>glc :Glcd<CR>

        " for the diffmode
        noremap <Leader>du :diffupdate<CR>

        if !exists(":Gdiffoff")
            command Gdiffoff diffoff | q | Gedit
        endif
        noremap <Leader>dq :Gdiffoff<CR>
    "}

    " UltiSnips {
        let g:UltiSnipsExpandTrigger = "<c-j>"
    " }

    " TaskList {
        map <unique> <Leader>t <Plug>TaskList
    " }

    " Singlecompile {
        nmap <Leader>g :SCCompileRun<cr><cr><cr>
        nmap <Leader>v :SCViewResult<cr>
    " }

    " Tabularize {
        nmap <LocalLeader>& :Tabularize /&<CR>
        vmap <LocalLeader>& :Tabularize /&<CR>
        nmap <LocalLeader>= :Tabularize /=<CR>
        vmap <LocalLeader>= :Tabularize /=<CR>
        nmap <LocalLeader>: :Tabularize /:<CR>
        vmap <LocalLeader>: :Tabularize /:<CR>
        nmap <LocalLeader>:: :Tabularize /:\zs<CR>
        vmap <LocalLeader>:: :Tabularize /:\zs<CR>
        nmap <LocalLeader>, :Tabularize /,<CR>
        vmap <LocalLeader>, :Tabularize /,<CR>
        nmap <LocalLeader>,, :Tabularize /,\zs<CR>
        vmap <LocalLeader>,, :Tabularize /,\zs<CR>
        nmap <LocalLeader><Bar> :Tabularize /<Bar><CR>
        vmap <LocalLeader><Bar> :Tabularize /<Bar><CR>
    " }

    " vim-indent-guides {
        let g:indent_guides_enable_on_vim_startup=0
        let g:indent_guides_start_level=2
        let g:indent_guides_guide_size=1
    " }

    " PyMode {
        if !has('python')
            let g:pymode = 0
        endif
        let g:pymode_lint_checker = "pyflakes"
        let g:pymode_utils_whitespaces = 0
        let g:pymode_options = 0
    " }

    " vim-youdao-translater {
        vnoremap <silent> <Leader>d <Esc>:Ydv<CR>
        nnoremap <silent> <Leader>d <Esc>:Ydc<CR>
        noremap <Leader>de :Yde<CR>
    " }

    " AutoComple {
        autocmd FileType c set omnifunc=ccomplete#Complete
        autocmd FileType java set omnifunc=javacomplete#Complete
        autocmd FileType python set omnifunc=pythoncomplete#Complete
        autocmd FileType php set omnifunc=phpcomplete#CompletePHP
        autocmd FileType ruby set omnifunc=rubycomplete#CompletePHP
        autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType html,markdown set omnifunc=htmlcomplete#CompleteTags
        autocmd FileType css set omnifunc=csscomplete#CompleteCSS
        autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
        autocmd FileType java inoremap <buffer> . .<C-X><C-O><C-P>
    " }

    " neocomplcache {
        let g:neocomplcache_enable_at_startup = 1
        au Filetype c,cpp,java,python let g:neocomplcache_enable_at_startup = 0
        set dict+=$HOME/.vim/static/dict_with_cases
        let g:neocomplcache_dictionary_filetype_lists = {'_' : $HOME . "/.vim/static/english_dict"}
        let g:neocomplcache_auto_completion_start_length = 2
        let g:neocomplcache_enable_smart_case = 1
        let g:neocomplcache_enable_fuzzy_completion = 1         " 开启模糊匹配
        let g:neocomplcache_fuzzy_completion_start_length = 2   " 3个字母后开启模糊匹配
        let g:neocomplcache_min_syntax_length = 3
        let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
    " }

    " YouCompleteMe {
        set completeopt=longest,menu                    " 关掉补全时的预览窗口
        let g:ycm_confirm_extra_conf = 0                " 不用每次提示加载.ycm_extra_conf.py文件
        let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
        let g:ycm_show_diagnostics_ui = 0               " 关闭ycm的syntastic
        let g:ycm_filetype_whitelist = {'c' : 1, 'cpp' : 1, 'java' : 1, 'python' : 1}
        let g:ycm_complete_in_comments = 1              " 评论中也应用补全
        let g:ycm_min_num_of_chars_for_completion = 2   " 两个字开始补全
        let g:ycm_seed_identifiers_with_syntax = 1
        let g:ycm_key_invoke_completion = '<C-Space>'
        let g:ycm_semantic_triggers =  {'c' : ['->', '.'], 'objc' : ['->', '.'], 'ocaml' : ['.', '#'], 'cpp,objcpp' : ['->', '.', '::'], 'php' : ['->', '::'], 'cs,java,javascript,vim,coffee,python,scala,go' : ['.'], 'ruby' : ['.', '::']}
        nnoremap <Leader>n :YcmForceCompileAndDiagnostics<CR>
        nnoremap <Leader>j :YcmCompleter GoToDefinitionElseDeclaration<CR>
    " }

" }

" Unite Menu {"{{{
        let g:unite_source_menu_menus = {}
        nnoremap <LocalLeader>m :Unite menu<cr>

        let g:unite_source_menu_menus.navigation = {
            \ 'description' : '     navigate by buffers, tabs & windows
                \                    ⌘ <space>n',
            \}
        let g:unite_source_menu_menus.navigation.command_candidates = [
            \['▷ buffers                                                                ⌘ ,b',
                \'Unite buffer'],
            \['▷ tabs                                                                   ⌘ ',
                \'Unite tab'],
            \['▷ windows                                                                ⌘ ',
                \'Unite window'],
            \['▷ location list                                                          ⌘ <space>x',
                \'Unite location_list'],
            \['▷ quickfix                                                               ⌘ <space>z',
                \'Unite quickfix'],
            \['▷ next buffer                                                            ⌘ K',
                \'bnext'],
            \['▷ prev buffer                                                            ⌘ J',
                \'bprevious'],
            \['▷ delete buffer                                                          ⌘ :bd',
                \'bd'],
            \['▷ next tab                                                               ⌘ ,tn',
                \'tabn'],
            \['▷ prev tab                                                               ⌘ ,tp',
                \'tabp'],
            \['▷ NERDTree                     (NERDTRee)                                ⌘ ,w',
                \'NERDTreeToggle'],
            \['▷ NERDTreeFind                 (NERDTRee)                                ⌘ ,wf',
                \'NERDTreeFind'],
            \['▷ new vertical window                                                    ⌘ <C-w>v',
                \'vsplit'],
            \['▷ new horizontal window                                                  ⌘ <C-w>s',
                \'split'],
            \['▷ toggle quickfix window                                                 ⌘ :cw',
                \'cw'],
            \['▷ close current window                                                   ⌘ :c',
                \'close'],
            \]
        nnoremap <LocalLeader>n :Unite menu:navigation<CR>

        let g:unite_source_menu_menus.bookmarks = {
            \ 'description' : '      bookmarks
                \                                              ⌘ <space>b',
            \}
        let g:unite_source_menu_menus.bookmarks.command_candidates = [
            \['▷ Unite open bookmarks                                                   ⌘ ',
                \'Unite bookmark:*'],
            \['▷ Unite add bookmark                                                     ⌘ ',
                \'UniteBookmarkAdd'],
            \['▷ Text add bookmark                                                      ⌘ mm',
                \'VbookmarkToggle'],
            \['▷ Next bookmark                                                          ⌘ mn',
                \'VbookmarkNext'],
            \['▷ Prev bookmark                                                          ⌘ mp',
                \'VbookmarkPrevious'],
            \['▷ Clear bookmark                                                         ⌘ ma',
                \'VbookmarkClearAll'],
            \]
        nnoremap <LocalLeader>b :Unite menu:bookmarks<CR>

        let g:unite_source_menu_menus.cscope = {
            \ 'description' : '         cscope
                \                                                 ⌘ <space>e',
            \}
        let g:unite_source_menu_menus.cscope.command_candidates = [
            \['▷ find definition                            (cscope)                    ⌘ ,,g',
                \'normal ,,g'],
            \['▷ find call it                               (cscope)                    ⌘ ,,c',
                \'normal ,,c'],
            \['▷ find it call                               (cscope)                    ⌘ ,,d',
                \'normal ,,d'],
            \['▷ find c symbol                              (cscope)                    ⌘ ,,s',
                \'normal ,,s'],
            \['▷ find word                                  (cscope)                    ⌘ ,,4',
                \'normal ,,4'],
            \['▷ egrep word                                 (cscope)                    ⌘ ,,6',
                \'normal ,,6'],
            \['▷ find file                                  (cscope)                    ⌘ ,,7',
                \'normal ,,7'],
            \['▷ find include this file                     (cscope)                    ⌘ ,,8',
                \'normal ,,8'],
            \]
        nnoremap <LocalLeader>e :Unite menu:cscope<CR>

        let g:unite_source_menu_menus.code = {
            \ 'description' : '           coding
                \                                                 ⌘ <space>c',
            \}
        let g:unite_source_menu_menus.code.command_candidates = [
            \['▷ Count lines of code                                                    ⌘ ',
                \'Unite -default-action= output:call\\ LinesOfCode()'],
            \['▷ Toggle indent lines                        (indent-guides)             ⌘ ,ig',
                \'IndentGuidesToggle'],
            \['▷ Tagbar                                     (Tagbar)                    ⌘ ,e',
                \'Tagbar'],
            \['▷ Syntastic toggle                           (syntastic)                 ⌘ ',
                \'SyntasticToggleMode'],
            \['▷ Syntastic check & errors                   (syntastic)                 ⌘ ,r',
                \'normal ,r'],
            \['▷ Compile and runtimepath                    (SingleCompile)             ⌘ ,g',
                \'SCCompileRun'],
            \['▷ View result                                (SingleCompile)             ⌘ ,v',
                \'SCViewResult'],
            \['▷ YCM compile and diagnostics                (YouCompleteMe)             ⌘ ,n',
                \'normal ,cm'],
            \['▷ YCM go to definition                       (YouCompleteMe)             ⌘ ,j',
                \'normal ,cm'],
            \['▷ Comment current line                       (nerdcommenter)             ⌘ ,cc',
                \'normal ,cc'],
            \['▷ Same as cc but forces nesting              (nerdcommenter)             ⌘ ,cn',
                \'normal ,cn'],
            \['▷ Uncomment current line                     (nerdcommenter)             ⌘ ,cu',
                \'normal ,cu'],
            \['▷ Comment sexily                             (nerdcommenter)             ⌘ ,cs',
                \'normal ,cs'],
            \['▷ Comment using one set                      (nerdcommenter)             ⌘ ,cm',
                \'normal ,cm'],
            \]
        nnoremap <LocalLeader>c :Unite menu:code<CR>

        let g:unite_source_menu_menus.files = {
            \ 'description' : '          files & dirs
                \                                           ⌘ <space>f',
            \}
        let g:unite_source_menu_menus.files.command_candidates = [
            \['▷ open file                                                              ⌘ ,f',
                \'Unite -start-insert file'],
            \['▷ open file with recursive search                                        ⌘ ',
                \'Unite -start-insert file_rec/async'],
            \['▷ search directory                                                       ⌘ ',
                \'Unite -start-insert directory'],
            \['▷ search directory with recursive search                                 ⌘ ',
                \'Unite -start-insert directory_rec/async'],
            \['▷ edit new file                                                          ⌘ ',
                \'Unite -start-insert file/new'],
            \['▷ make new directory                                                     ⌘ ',
                \'Unite -start-insert directory/new'],
            \['▷ change working directory                                               ⌘ ',
                \'Unite -default-action=lcd directory'],
            \['▷ know current working directory                                         ⌘ ',
                \'Unite output:pwd'],
            \['▷ search recently used files                                             ⌘ ,fr',
                \'Unite -start-insert file_mru'],
            \['▷ search recently used directories                                       ⌘ ',
                \'Unite -start-insert directory_mru'],
            \['▷ save as root                                                           ⌘ :w!!',
                \'exe "write !sudo tee % >/dev/null"'],
            \['▷ open ranger                                                            ⌘ <Space>c',
                \'call RangerChooser()'],
            \]
        nnoremap <LocalLeader>f :Unite menu:files<CR>

        let g:unite_source_menu_menus.git = {
            \ 'description' : '            admin git repositories
                \                                 ⌘ <space>g',
            \}
        let g:unite_source_menu_menus.git.command_candidates = [
            \['▷ git init                                                               ⌘ ,gn',
                \'Unite output:echo\ system("git\ init")'],
            \['▷ next hunk              (gitgutter)                                     ⌘ gh',
                \'GitGutterNextHunk'],
            \['▷ prev hunk              (gitgutter)                                     ⌘ hg',
                \'GitGutterPrevHunk'],
            \['▷ git status             (fugitive)                                      ⌘ ,gs',
                \'Gstatus'],
            \['▷ git diff               (fugitive)                                      ⌘ ,gd',
                \'Gdiff'],
            \['▷ git commit             (fugitive)                                      ⌘ ,gc',
                \'Gcommit'],
            \['▷ git log                (fugitive)                                      ⌘ ,gl',
                \'exe "silent Glog | Unite -no-quit quickfix"'],
            \['▷ git log - all          (fugitive)                                      ⌘ ,gL',
                \'exe "silent Glog -all | Unite -no-quit quickfix"'],
            \['▷ git blame              (fugitive)                                      ⌘ ,gb',
                \'Gblame'],
            \['▷ git add/stage          (fugitive)                                      ⌘ ,gw',
                \'Gwrite'],
            \['▷ git checkout           (fugitive)                                      ⌘ ,go',
                \'Gread'],
            \['▷ git rm                 (fugitive)                                      ⌘ ,gR',
                \'Gremove'],
            \['▷ git mv                 (fugitive)                                      ⌘ ,gm',
                \'exe "Gmove " input("destino: ")'],
            \['▷ git push               (fugitive, buffer output)                       ⌘ ,gp',
                \'Git! push'],
            \['▷ git pull               (fugitive, buffer output)                       ⌘ ,gP',
                \'Git! pull'],
            \['▷ git command            (fugitive, buffer output)                       ⌘ ,gi',
                \'exe "Git! " input("comando git: ")'],
            \['▷ git edit               (fugitive)                                      ⌘ ,gE',
                \'exe "command Gedit " input(":Gedit ")'],
            \['▷ git grep               (fugitive)                                      ⌘ ,gg',
                \'exe "silent Ggrep -i ".input("Pattern: ") | Unite -no-quit quickfix'],
            \['▷ git grep - messages    (fugitive)                                      ⌘ ,ggm',
                \'exe "silent Glog --grep=".input("Pattern: ")." | Unite -no-quit quickfix"'],
            \['▷ git grep - text        (fugitive)                                      ⌘ ,ggt',
                \'exe "silent Glog -S".input("Pattern: ")." | Unite -no-quit quickfix"'],
            \['▷ git cd                 (fugitive)                                      ⌘ ,gcd',
                \'Gcd'],
            \['▷ git lcd                (fugitive)                                      ⌘ ,glc',
                \'Glcd'],
            \['▷ git browse             (fugitive)                                      ⌘ ,gB',
                \'Gbrowse'],
            \['▷ github issues & PR                                                     ⌘ ,gS',
                \'normal ,gS'],
            \]
        nnoremap <LocalLeader>g :Unite menu:git<CR>

        let g:unite_source_menu_menus.history = {
            \ 'description' : '        yanks, registers & history
                \                             ⌘ <space>h',
            \}
        let g:unite_source_menu_menus.history.command_candidates = [
            \['▷ yanks                                                                  ⌘ <space>p',
                \'Unite history/yank'],
            \['▷ registers                                                              ⌘ <space>q',
                \'Unite register'],
            \['▷ messages                                                               ⌘ ',
                \'Unite output:messages'],
            \['▷ search changes                                                         ⌘ ',
                \'Unite change'],
            \['▷ search jumps                                                           ⌘ ',
                \'Unite jump'],
            \['▷ search tasks                                                           ⌘ ,t',
                \'TaskList'],
            \['▷ undo tree      (Undotree)                                              ⌘ ,q',
                \'UndotreeToggle'],
            \]
        nnoremap <LocalLeader>h :Unite menu:history<CR>

        let g:unite_source_menu_menus.searching = {
            \ 'description' : '      searchs inside the current buffer
                \                      ⌘ <space>s',
            \}
        let g:unite_source_menu_menus.searching.command_candidates = [
            \['▷ search line                                                            ⌘ ',
                \'Unite -auto-preview -start-insert line'],
            \['▷ grep (ag → ack → grep)                                                 ⌘ ,a',
                \'Unite -auto-preview -winheight=40 -no-quit grep'],
            \['▷ grep current word                                                      ⌘ ,A',
                \'UniteWithCursorWord -auto-preview -winheight=40 -no-quit grep'],
            \['▷ search word under the cursor in current buffer                         ⌘ ',
                \'UniteWithCursorWord -no-split -auto-preview line'],
            \['▷ search outlines & tags (ctags)                                         ⌘ ,c',
                \'Unite -vertical -winwidth=40 -direction=topleft -toggle outline'],
            \['▷ search marks                                                           ⌘ ',
                \'Unite -auto-preview mark'],
            \['▷ search folds                                                           ⌘ ',
                \'Unite -vertical -winwidth=30 -auto-highlight fold'],
            \['▷ find                                                                   ⌘ ',
                \'Unite find'],
            \['▷ vimgrep (very slow)                                                    ⌘ ',
                \'Unite vimgrep'],
            \['▷ trigger easymotion               (easymotion)                          ⌘ ,,',
                \''],
            \]
        nnoremap <LocalLeader>s :Unite menu:searching<CR>

        let g:unite_source_menu_menus.text = {
            \ 'description' : '           text edition
                \                                           ⌘ <space>t',
            \}
        let g:unite_source_menu_menus.text.command_candidates = [
            \['▷ toggle search results highlight                                        ⌘ ,h',
                \'normal ,h'],
            \['▷ toggle nu or rnu                                                       ⌘ ,s',
                \'normal ,s'],
            \['▷ show hidden chars                                                      ⌘ ,l',
                \'normal ,l'],
            \['▷ toggle fold                                                            ⌘ <Tab>',
                \'normal <Tab>'],
            \['▷ multiple-cursors: next               (vim-multiple-cursors)            ⌘ <C-n>',
                \'normal <C-n>'],
            \['▷ multiple-cursors: prev               (vim-multiple-cursors)            ⌘ <C-p>',
                \'normal <C-p>'],
            \['▷ multiple-cursors: skip               (vim-multiple-cursors)            ⌘ <C-x>',
                \'normal <C-x>'],
            \['▷ Dictionary                           (vim-youdao-translater)           ⌘ ,de',
                \'Yde'],
            \['▷ Translate cursor word                (vim-youdao-translater)           ⌘ ,d',
                \'Ydc'],
            \['▷ toggle surround in visualmode        (surround)                        ⌘ S',
                \''],
            \['▷ add surroundings in visualmode       (surround)                        ⌘ ys',
                \''],
            \['▷ change surroundings in visualmode    (surround)                        ⌘ cs',
                \''],
            \['▷ delete surroundings in visualmode    (surround)                        ⌘ ds',
                \''],
            \]
        nnoremap <LocalLeader>t :Unite menu:text<CR>

        let g:unite_source_menu_menus.tabularize = {
            \ 'description' : '     tabularize
                \                                             ⌘ <space>d',
            \}
        let g:unite_source_menu_menus.tabularize.command_candidates = [
            \['▷ Tabularize &                                                           ⌘ <Space>&',
                \'Tabularize /&'],
            \['▷ Tabularize =                                                           ⌘ <Space>=',
                \'Tabularize /='],
            \['▷ Tabularize :                                                           ⌘ <Space>:',
                \'Tabularize /:'],
            \['▷ Tabularize ::                                                          ⌘ <Space>::',
                \'Tabularize /:\zs'],
            \['▷ Tabularize ,                                                           ⌘ <Space>,',
                \'Tabularize /,'],
            \['▷ Tabularize ,,                                                          ⌘ <Space>,,',
                \'Tabularize /,\zs'],
            \['▷ Tabularize <Bar>                                                       ⌘ <Space><Bar>',
                \'Tabularize /<Bar>'],
            \]
        nnoremap <LocalLeader>d :Unite menu:tabularize<CR>

        let g:unite_source_menu_menus.vim = {
            \ 'description' : '            vim
                \                                                    ⌘ <space>v',
            \}
        let g:unite_source_menu_menus.vim.command_candidates = [
            \['▷ edit configuration file (vimrc)                                        ⌘ ',
                \'edit $MYVIMRC'],
            \['▷ choose colorscheme                                                     ⌘ ',
                \'Unite colorscheme -auto-preview'],
            \['▷ mappings                                                               ⌘ ',
                \'Unite mapping -start-insert'],
            \['▷ vim commands                                                           ⌘ ',
                \'Unite -start-insert command'],
            \['▷ vim functions                                                          ⌘ ',
                \'Unite -start-insert function'],
            \['▷ choose filetype                                                        ⌘ ',
                \'Unite -start-insert filetype'],
            \['▷ vim help                                                               ⌘ ',
                \'Unite -start-insert help'],
            \['▷ vim runtimepath                                                        ⌘ ',
                \'Unite -start-insert runtimepath'],
            \['▷ vim command output                                                     ⌘ ',
                \'Unite output'],
            \['▷ unite sources                                                          ⌘ ',
                \'Unite source'],
            \['▷ kill process                                                           ⌘ ',
                \'Unite -default-action=sigkill -start-insert process'],
            \['▷ launch executable (dmenu like)                                         ⌘ ',
                \'Unite -start-insert launcher'],
            \]
        nnoremap <LocalLeader>v :Unite menu:vim<CR>

        let g:unite_source_menu_menus.colorv = {
            \ 'description' : '         color management
                \                                       ⌘ <space>l',
            \}
        let g:unite_source_menu_menus.colorv.command_candidates = [
            \['▷ open colorv                                                            ⌘ ,cv',
                \'ColorV'],
            \['▷ open colorv with the color under the cursor                            ⌘ ,cw',
                \'ColorVView'],
            \['▷ preview colors                                                         ⌘ ,cpp',
                \'ColorVPreview'],
            \['▷ color picker                                                           ⌘ ,cd',
                \'ColorVPicker'],
            \['▷ edit the color under the cursor                                        ⌘ ,ce',
                \'ColorVEdit'],
            \['▷ edit the color under the cursor (and all the concurrences)             ⌘ ,cE',
                \'ColorVEditAll'],
            \['▷ insert a color                                                         ⌘ ,cii',
                \'exe "ColorVInsert " .GetColorFormat()'],
            \['▷ color list relative to the current                                     ⌘ ,cgh',
                \'exe "ColorVList " .GetColorMethod() "
                \ ".input("number of colors? (optional): ")
                \ " ".input("number of steps?  (optional): ")'],
            \['▷ show colors list (Web W3C colors)                                      ⌘ ,cn',
                \'ColorVName'],
            \['▷ choose color scheme (ColourLovers, Kuler)                              ⌘ ,css',
                \'ColorVScheme'],
            \['▷ show favorite color schemes                                            ⌘ ,csf',
                \'ColorVSchemeFav'],
            \['▷ new color scheme                                                       ⌘ ,csn',
                \'ColorVSchemeNew'],
            \['▷ create hue gradation between two colors                                ⌘ ',
                \'exe "ColorVTurn2 " " ".input("Color 1 (hex): ")
                \" ".input("Color 2 (hex): ")'],
            \]
        nnoremap <LocalLeader>l :Unite menu:colorv<cr>

        let g:unite_source_menu_menus.markdown = {
            \ 'description' : '       preview markdown extra docs
                \                            ⌘ <space>k',
            \}
        let g:unite_source_menu_menus.markdown.command_candidates = [
            \['▷ preview                                                                ⌘ ',
                \'Me'],
            \['▷ refresh                                                                ⌘ ',
                \'Mer'],
            \]
        nnoremap <LocalLeader>k :Unite -silent menu:markdown<CR>

        let g:unite_source_menu_menus.web = {
            \ 'description' : '            web development
                \                                        ⌘ <space>w',
            \}
        let g:unite_source_menu_menus.web.command_candidates = [
            \['▷ show emmet tutorial                                                    ⌘ ',
                \'h emmet-tutorial'],
            \]
        nnoremap <LocalLeader>w :Unite -silent menu:web<CR>

" }"}}}
