" Vundle {
    set nocompatible 	" 设置 vim 为不兼容 vi 模式
    filetype off		" 必须的

    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()

    " 代码源在 github 上的
    Bundle 'gmarik/vundle'
    Bundle 'tpope/vim-fugitive'
    Bundle 'tpope/vim-surround'
    Bundle 'tpope/vim-markdown'
    Bundle 'Shougo/unite.vim'
    Bundle 'Shougo/neocomplcache.vim'
    Bundle 'Shougo/vimproc.vim'
    Bundle 'Shougo/vimshell.vim'
    Bundle 'terryma/vim-expand-region'
    Bundle 'terryma/vim-multiple-cursors'
    Bundle 'scrooloose/syntastic'
    Bundle 'scrooloose/nerdtree'
    Bundle 'scrooloose/nerdcommenter'
    Bundle 'kien/ctrlp.vim'
    Bundle 'xuhdev/SingleCompile'
    Bundle 'Lokaltog/vim-easymotion'
    Bundle 'airblade/vim-gitgutter'
    Bundle 'majutsushi/tagbar'
    Bundle 'mbbill/undotree'
    Bundle 'huxiao/vim-bookmark'
    Bundle 'SirVer/ultisnips'
    Bundle 'honza/vim-snippets'
    Bundle 'bling/vim-airline'
    Bundle 'Valloric/YouCompleteMe'
    Bundle 'osyo-manga/vim-over'
    Bundle 'godlygeek/tabular'
    Bundle 'gorodinskiy/vim-coloresque'
    Bundle 'greyblake/vim-preview'
    Bundle 'flazz/vim-colorschemes'
    Bundle 'altercation/vim-colors-solarized'
    Bundle 'klen/python-mode'
    Bundle 'mileszs/ack.vim'
    Bundle 'yonchu/accelerated-smooth-scroll'
    Bundle 'groenewege/vim-less'
    Bundle "pangloss/vim-javascript"
    Bundle 'hail2u/vim-css3-syntax'
    Bundle 'elzr/vim-json'
    Bundle 'tpope/vim-cucumber'
    Bundle 'quentindecock/vim-cucumber-align-pipes'
    Bundle 'Puppet-Syntax-Highlighting'
    Bundle 'ianva/vim-youdao-translater'
    Bundle 'nathanaelkane/vim-indent-guides'

    " 代码存放在 vim script 上
    Bundle 'sudo.vim'
    Bundle 'grep.vim'
    Bundle 'javacomplete'
    Bundle 'matchit.zip'
    Bundle 'a.vim'
    Bundle 'TaskList.vim'
    Bundle 'python.vim'

    " 代码存放在其他地方
    " Bundle 'git://git.wincent.com/command-t.git'

    filetype plugin indent on     " 必须有,打开文件类型检测
    " Brief help
    " :BundleList          - list configured bundles
    " :BundleInstall(!)    - install(update) bundles
    " :BundleSearch(!) foo - search(or refresh cache first) for foo
    " :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
    "
    " see :h vundle for more details or wiki for FAQ
    " NOTE: comments after Bundle command are not allowed..
" }

" General {

    set nu						" 显示行号
    set nocp					" 不兼容vi
    syntax enable				" 语法高亮
    syntax on
    set hidden                  " 允许不保存切换buffer
    set splitright              " 新分割窗口在右边
    set splitbelow              " 新分割窗口在下边
    set hls 					" 检索时高亮显示匹配项
    set ic 						" 检索时忽略大小写
    set autoread                " 文件在Vim之外修改过，自动重新读入
    set timeoutlen=350 			" 等待时间,如<leader>键后的输入
    set encoding=utf-8          " 编码，使汉语正常显示
    set termencoding=utf-8
    set fileencodings=utf-8,gb2312,gbk,gb18030

" }

" Formatting {
    
    set expandtab               " tab=空格
    set tabstop=4				" tab缩进4个空格
    set shiftwidth=4			" 自动缩进空格数
    set softtabstop=4           " 退格删除缩进
    set bs=2 					" 在插入模式下用退格删除
    set autoindent              " 与前一行同样等级缩进
    au VimResized * exe "normal! \<c-w>="
    au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o " 下一行不自动添加注释

" }

" Key (re)Mappings {

    let mapleader="," 			" 映射<leader>键到为,
    nmap Y y$
    nmap V v$h
    nnoremap ; :
    inoremap jj <ESC>
    nmap j gj
    nmap k gk
    nnoremap <silent> J :bp<CR>
    nnoremap <silent> K :bn<CR>
    noremap <silent><Leader>h :set hlsearch! hlsearch?<CR>
    nmap <leader>tag  :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR>:TlistUpdate <CR>:NeoComplCacheCachingTags<CR>

    " 更方便窗口间移动
    nnoremap <C-h> <C-w>h
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-l> <C-w>l

    cnoremap <C-a> <Home>
    cnoremap <C-e> <End>

    " 修正易错命令
    command -bang -nargs=* Q q<bang>
    command -bang -nargs=* Wa wa<bang>
    command -bang -nargs=* WA wa<bang>
    command -bang -nargs=* -complete=file W w<bang> <args>
    command -bang -nargs=* -complete=file Wq wq<bang> <args>
    command -bang -nargs=* -complete=file WQ wq<bang> <args>

" }

" Vim UI {

    if filereadable(expand("~/.vim/bundle/vim-colors-solarized/colors/solarized.vim"))
        let g:solarized_termcolors=256
        let g:solarized_termtrans=1
        let g:solarized_contrast="normal"
        let g:solarized_visibility="normal"
        color solarized             " 载入皮肤主题
        set background=dark
    endif

    set t_Co=256                    " 终端显示256色
    set tabpagemax=15               " 最多15个Tab
    set showmode                    " 显示当前mode
    set cursorline                  " 高亮当前行

    hi clear SignColumn             " SignColumn should match background
    hi clear LineNr                 " Current line number row will have same background color in relative mode

    hi CursorLineNr ctermfg=red
    hi VertSplit ctermbg=Grey ctermfg=Grey cterm=none
    hi Visual ctermbg=81 ctermfg=black cterm=none
    hi Comment ctermfg=blue guifg=#145ecc
    hi Statement ctermfg=3

    hi DiffAdd ctermbg=blue ctermfg=white
    hi DiffDelete ctermbg=green ctermfg=none
    hi DiffChange ctermbg=red ctermfg=White
    hi DiffText ctermbg=yellow ctermfg=black

    set backspace=indent,eol,start  " Backspace for dummies
    set linespace=0                 " No extra spaces between rows
    set showmatch                   " Show matching brackets/parenthesis
    set incsearch                   " Find as you type search
    set hlsearch                    " Highlight search terms
    set winminheight=0              " Windows can be 0 line high
    set ignorecase                  " Case insensitive search
    set smartcase                   " Case sensitive when uc present
    set wildmenu                    " Show list instead of just completing
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set foldenable                  " Auto fold code
    nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
    
    set scrolljump=5                " Lines to scroll when cursor leaves screen
    set scrolloff=3                 " Minimum lines to keep above and below cursor

    if has('cmdline_info')
        set ruler                   " 右下角显示状态说明
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " 设定格式
        set showcmd                 " 右下角显示当前操作
    endif

    if has('statusline')
        set laststatus=2
        set statusline=%<%f\                     " Filename
        set statusline+=%w%h%m%r                 " Options
        set statusline+=%{fugitive#statusline()} " Git Hotness
        set statusline+=\ [%{&ff}/%Y]            " Filetype
        set statusline+=\ [%{getcwd()}]          " Current dir
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
    endif

" }

" Plugins {

    " vim-airline {
        set laststatus=2
        let g:airline_theme='solarized'
        let g:airline#extensions#tabline#enabled = 1 "顶部tab栏显示
        let g:airline_powerline_fonts = 0
        if g:airline_powerline_fonts != 1
            let g:airline_left_sep=''
            let g:airline_right_sep=''
            let g:airline#extensions#tabline#left_sep=''
            let g:airline#extensions#tabline#right_sep=''
        endif

        function! AirlineInit()
            let g:airline_section_a = airline#section#create(['mode'])
            let g:airline_section_b = airline#section#create_left(['branch','hunks'])
            let g:airline_section_c = airline#section#create(['%f'])
            let g:airline_section_y = airline#section#create(['ffenc','%4B'])
            let g:airline_section_z = airline#section#create(['%P',':','%4l',',','%3c'])
        endfunction
        autocmd VimEnter * call AirlineInit()
    " }

    " Cscope {
        :set cscopequickfix=s-,c-,d-,i-,t-,e-	" 使用QuickFix窗口来显示cscope查找结果
        :set cscopetag
        " 按下面这种组合键有技巧,按了<C-_>后要马上按下一个键,否则屏幕一闪
        " 就回到nomal状态了
        " <C-_>s的按法是先按"Ctrl+Shift+-",然后很快再按"s"
        nmap <C-_>s :cs find s <C-R>=expand("<cword>")<cr><cr> :cw<cr>
        nmap <C-_>g :cs find g <C-R>=expand("<cword>")<cr><cr> :cw<cr>
        nmap <C-_>c :cs find c <C-R>=expand("<cword>")<cr><cr> :cw<cr>
        nmap <C-_>t :cs find t <C-R>=expand("<cword>")<cr><cr> :cw<cr>
        nmap <C-_>e :cs find e <C-R>=expand("<cword>")<cr><cr> :cw<cr>
        nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<cr><cr>
        nmap <C-_>i :cs find i <C-R>=expand("<cfile>")<cr><cr> :cw<cr>
        nmap <C-_>d :cs find d <C-R>=expand("<cword>")<cr><cr> :cw<cr>
    " }

    " Tagbar {
        nmap <silent> <Leader>r :TagbarToggle<cr>
        let g:tagbar_left = 0 					"在右侧
        let g:tagbar_width = 30 				"设置宽度
    " }

    " NerdTree {
        map <Leader>n :NERDTreeToggle<CR>
        map <leader>ef :NERDTreeFind<CR>
        nmap <leader>nt :NERDTreeFind<CR>
        let NERDTreeShowBookmarks=1
        let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
        let NERDTreeChDirMode=0
        let NERDTreeQuitOnOpen=1
        let NERDTreeMouseMode=2
        let NERDTreeShowHidden=1
        let NERDTreeKeepTreeInNewTab=1
    " }

    " UndoTree {
        nmap <silent> <Leader>u :UndotreeToggle<cr>
        let g:undotree_SetFocusWhenToggle=0
    " }

    " persistent_undo {
        set nobackup noswapfile
        set history=200                        " command line history
        if has('persistent_undo')
            set undofile                       " keep an undo record separately for every file
            set undolevels=1000
            set undoreload=10000
            set undodir=~/.vimtmp/undo
        endif
        set viminfo+=n$HOME/.vimtmp/viminfo
    " }

    " Syntastic {
        let g:syntastic_che_on_open=1
        let g:syntastic_auto_jump=1
        let g:syntastic_error_symbol = 'e>'
        let g:syntastic_warning_symbol = 'w>'
        let g:syntastic_always_populate_loc_list=1
        let g:syntastic_loc_list_height = 6
        let g:syntastic_enable_highlighting = 0
        nmap <Leader>e :Errors<cr>
        nmap <Leader>x :lnext<cr>
        nmap <Leader>z :lpre<cr>
    " }

    " gitgutter {
        let g:gitgutter_enabled = 1
        let g:gitgutter_highlight_lines = 0
        nmap gh <Plug>GitGutterNextHunk
        nmap hg <Plug>GitGutterPrevHunk
    " }

    " Fugitive {
        nnoremap <silent> <leader>gs :Gstatus<CR>
        nnoremap <silent> <leader>gd :Gdiff<CR>
        nnoremap <silent> <leader>gc :Gcommit<CR>
        nnoremap <silent> <leader>gb :Gblame<CR>
        nnoremap <silent> <leader>gl :Glog<CR>
        nnoremap <silent> <leader>gp :Git push<CR>
        nnoremap <silent> <leader>gr :Gread<CR>
        nnoremap <silent> <leader>gw :Gwrite<CR>
        nnoremap <silent> <leader>ge :Gedit<CR>
        nnoremap <silent> <leader>gi :Git add -p %<CR>
        nnoremap <silent> <leader>gg :SignifyToggle<CR>
    "}

    " ctrlp {
        let g:ctrlp_map = '<c-p>'
        let g:ctrlp_cmd = 'CtrlP'
        let g:ctrlp_open_multiple_files = 'v' 	" <C-Z><C-O>时垂直分屏打开多个文件
        set wildignore+=*/tmp/*,*.so,*.swp,*.zip
        let g:ctrlp_custom_ignore = {
          \ 'dir':  '\v[\/]\.(git)$',
          \ 'file': '\v\.(log|jpg|png|jpeg)$',
          \ }
        let g:ctrlp_working_path_mode= 'ra'
        let g:ctrlp_match_window_bottom= 1
        let g:ctrlp_max_height= 10
        let g:ctrlp_match_window_reversed=0
        let g:ctrlp_mruf_max=500
        let g:ctrlp_follow_symlinks=1
    " }

    " AutoComple {
        autocmd FileType c set omnifunc=ccomplete#Complete
        autocmd FileType java set omnifunc=javacomplete#Complete
        autocmd FileType python set omnifunc=pythoncomplete#Complete
        autocmd FileType php set omnifunc=phpcomplete#CompletePHP
        autocmd FileType ruby set omnifunc=rubycomplete#CompletePHP
        autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType html,markdown set omnifunc=htmlcomplete#CompleteTags
        autocmd FileType css set omnifunc=csscomplete#CompleteCSS
        autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
        autocmd FileType java inoremap <buffer> . .<C-X><C-O><C-P>
        inoremap <expr> <CR>  pumvisible()?"\<C-Y>":"<CR>"
    " }

    " neocomplcache {
        let g:neocomplcache_enable_at_startup = 1
        au Filetype c,cpp,java,python let g:neocomplcache_enable_at_startup = 0
        set dict+=$HOME/.vim/static/dict_with_cases
        let g:neocomplcache_dictionary_filetype_lists = {'_' : $HOME . "/.vim/static/english_dict"}
        let g:neocomplcache_auto_completion_start_length = 1
        let g:neocomplcache_enable_smart_case = 1
        let g:neocomplcache_enable_fuzzy_completion = 1 		" 开启模糊匹配
        let g:neocomplcache_fuzzy_completion_start_length = 3 	" 3个字母后开启模糊匹配
        let g:neocomplcache_min_syntax_length = 3
        let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
    " }

    " YouCompleteMe {
        set completeopt=longest,menu					" 关掉补全时的预览窗口
        let g:ycm_confirm_extra_conf = 0 				" 不用每次提示加载.ycm_extra_conf.py文件
        let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
        let g:ycm_filetype_whitelist = {'c' : 1, 'cpp' : 1, 'java' : 1, 'python' : 1}
        let g:ycm_complete_in_comments = 1 				" 评论中也应用补全
        let g:ycm_min_num_of_chars_for_completion = 1 	" 一个字开始补全
        let g:ycm_seed_identifiers_with_syntax = 1
        let g:ycm_key_invoke_completion = '<C-Space>'
        let g:ycm_semantic_triggers =  {'c' : ['->', '.'], 'objc' : ['->', '.'], 'ocaml' : ['.', '#'], 'cpp,objcpp' : ['->', '.', '::'], 'php' : ['->', '::'], 'cs,java,javascript,vim,coffee,python,scala,go' : ['.'], 'ruby' : ['.', '::']}
        nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
        nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
    " }

    " surround {
        xmap s <Plug>VSurround
    " }

    " EasyMotion {
        let g:EasyMotion_leader_key = 'f' 			" 默认是<leader><leader>
    " }

    " UltiSnips {
        let g:UltiSnipsExpandTrigger = "<c-j>"  	" ultisnips与supertab快捷键重复,重新定义
    " }

    " TaskList {
        map <unique> <Leader>t <Plug>TaskList
    " }

    " Unite {
        nmap <silent> <Leader>m :Unite mapping<cr>
        nmap <silent> <Leader>f :Unite file<cr>
    " }

    " Expand_region {
    "    map L <Plug>(expand_region_expand)
    "    map H <Plug>(expand_region_shrink)
    " }

    " Singlecompile {
        nmap <Leader>g :SCCompileRun<cr><cr><cr>
        nmap <Leader>v :SCViewResult<cr>
    " }

    " Tabularize {
        nmap <Leader>a& :Tabularize /&<CR>
        vmap <Leader>a& :Tabularize /&<CR>
        nmap <Leader>a= :Tabularize /=<CR>
        vmap <Leader>a= :Tabularize /=<CR>
        nmap <Leader>a: :Tabularize /:<CR>
        vmap <Leader>a: :Tabularize /:<CR>
        nmap <Leader>a:: :Tabularize /:\zs<CR>
        vmap <Leader>a:: :Tabularize /:\zs<CR>
        nmap <Leader>a, :Tabularize /,<CR>
        vmap <Leader>a, :Tabularize /,<CR>
        nmap <Leader>a,, :Tabularize /,\zs<CR>
        vmap <Leader>a,, :Tabularize /,\zs<CR>
        nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
        vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
    " }

    " PyMode {
        if !has('python')
            let g:pymode = 0
        endif
        let g:pymode_lint_checker = "pyflakes"
        let g:pymode_utils_whitespaces = 0
        let g:pymode_options = 0
    " }

    " vim-bookmark {
        let g:vbookmark_bookmarkSaveFile = $HOME . '/.vimtmp/vimbookmark'
    " }

    " vim-youdao-translater {
        vnoremap <silent> <Leader>d <Esc>:Ydv<CR>
        nnoremap <silent> <Leader>d <Esc>:Ydc<CR>
        noremap <Leader>de :Yde<CR>
    " }

    " vim-indent-guides {
        let g:indent_guides_enable_on_vim_startup=0
        let g:indent_guides_start_level=2
        let g:indent_guides_guide_size=1
    " }
" }
